[
    {
        "name": "Buffer",
        "description": "Virtual gate with no delay",
        "type": 1,
        "category": "General",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [null],
        "outputPinTypes": [null],
        "inputPinDescriptions": ["Any inputs will be forwarded to the outputting blocks"],
        "outputPinDescriptions": ["Outputs"],
        "requiredMods": []
    },
    {
        "name": "Not",
        "description": "Creates copy of input with inverted value",
        "type": 2,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Input to be inverted"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "And",
        "description": "Outputs true if all inputs are true",
        "type": 3,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be ANDed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Nand",
        "description": "Outputs true if at least one input is false",
        "type": 4,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be NANDed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Or",
        "description": "Outputs true if at least one input is true",
        "type": 5,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be ORed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Nor",
        "description": "Outputs true if all inputs are false",
        "type": 6,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be NORed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Xor",
        "description": "Outputs true if an odd number of inputs are true",
        "type": 7,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be XORed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Xnor",
        "description": "Outputs true if an even number of inputs are true",
        "type": 8,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Inputs to be XNORed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Timer",
        "description": "All inputs are outputted after the given delay+1",
        "type": 9,
        "category": "Logic",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["logic", "number"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Input to be delayed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": []
    },
    {
        "name": "Add",
        "description": "Outputs the sum of all number inputs",
        "type": 10,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be added"],
        "outputPinDescriptions": ["Sum"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Subtract",
        "description": "Subtracts all black inputs from all white inputs",
        "type": 11,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be subtracted"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Multiply",
        "description": "Outputs the multiplication of all inputs",
        "type": 12,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be multiplied"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Divide",
        "description": "Outputs the division of sum of white inputs by the sum of non-white inputs",
        "type": 13,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to divide/be divided"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Modulo",
        "description": "Outputs the remaineder after dividing the sum of white inputs by the sum of non-white inputs",
        "type": 14,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be moduloed"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Power",
        "description": "1 input: squares the input\n\nMultiple inputs: Outputs the sum of the white inputs to the power of the sum of the non-white inputs",
        "type": 15,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be powered (lmao wat)"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Root",
        "description": "1 input: Outputs the square root of the input\n\nMultiple inputs: Outputs the sum of the white inputs to the root of the sum of the non-white inputs",
        "type": 16,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be rooted"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Absolute Value",
        "description": "Outputs the sum of the absolute values of all inputs",
        "type": 17,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be absolutely valued"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Hypothenuse",
        "description": "Outputs the distance between the origin and the point formed by all the inputs",
        "type": 18,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be used as the coordinates of the point"],
        "outputPinDescriptions": ["Distance"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Logarithm",
        "description": "1 input: Outputs the natural logarithm of the input\n\nMultiple inputs: Outputs the logarithm of the sum of the non-white inputs with base sum of the white inputs",
        "type": 19,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be logged"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Factorial",
        "description": "floor(sum of all inputs)!",
        "type": 20,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be factorialled"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Exponential",
        "description": "No inputs: Outputs e\n\n1 or more inputs: Outputs e to the power of the sum of the inputs",
        "type": 21,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be exponentiated"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Memory bit",
        "description": "White input defines action:\n0: flip\n1:set\n2:reset\nno white input: flip\n\nWhen all non-white inputs are active (not 0 for numbers), the action will be taken. The action will happen every tick the inputs are on.",
        "type": 22,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number", "logic"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["State control"],
        "outputPinDescriptions": ["Current state"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Floor",
        "description": "sum(floor(inputs))",
        "type": 23,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be floored"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Round",
        "description": "sum(round(inputs))",
        "type": 24,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be rounded"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Ceiling",
        "description": "sum(ceil(inputs))",
        "type": 25,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be ceilinged"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Minimum",
        "description": "Outputs the minimum of all inputs",
        "type": 26,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs"],
        "outputPinDescriptions": ["Minimum"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Maximum",
        "description": "Outputs the maximum of all inputs",
        "type": 27,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs"],
        "outputPinDescriptions": ["Maximum"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "PID Controller",
        "description": "Proportional-Integral-Derivative controller\n\nblack: process value\nwhite: set value\norange: P multiplier\nred: I multiplier\npurple: D multiplier\n\norange 3: limit output (default: 3096)\nred 3: i time (between 10-1200 ticks) (default value: 400)\npurple 3: d time (between 1-20 ticks)",
        "type": 28,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Controls and inputs"],
        "outputPinDescriptions": ["Control output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Sine",
        "description": "sin(sum(inputs)) (degrees)",
        "type": 29,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be sined (deg)"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Cosine",
        "description": "cos(sum(inputs)) (degrees)",
        "type": 30,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be cosined (deg)"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Tangent",
        "description": "tan(sum(inputs)) (degrees)",
        "type": 31,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be tangented (deg)"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Arcsine",
        "description": "asin(sum(inputs)) (degrees)",
        "type": 32,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be arcsined"],
        "outputPinDescriptions": ["Angle (deg)"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Arccosine",
        "description": "acos(sum(inputs)) (degrees)",
        "type": 33,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be arccosined"],
        "outputPinDescriptions": ["Angle (deg)"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Arctangent",
        "description": "atan(sum(inputs)) (degrees)",
        "type": 34,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs to be arctangented"],
        "outputPinDescriptions": ["Angle (deg)"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Arctangent 2",
        "description": "atan2(sum(white), sum(black))\nwhite=Y, black=X\n(degrees)",
        "type": 35,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Coordinates to be arc-tangented"],
        "outputPinDescriptions": ["Angle (deg)"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "π",
        "description": "it just.. outputs π",
        "type": 36,
        "category": "Math",
        "inputPinNames": [],
        "outputPinNames": ["Output"],
        "inputPinTypes": [],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": [],
        "outputPinDescriptions": ["π"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Random",
        "description": "Inputs: logic, number\nno inputs: outputs random value between 0 and 1,\nlogic input will let it generate a new random number\nnumber input(s) define the range within to generate an integer value\n(input: 5 → output 1/2/3/4/5, input: -2, 3 → output: -2/-1/0/1/2/3)",
        "type": 37,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number", "logic"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Inputs"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Sign",
        "description": "Outputs 1 if the inputs > 0\noutputs -1 if the inputs < 0\noutputs 0 if the inputs are 0",
        "type": 38,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Input"],
        "outputPinDescriptions": ["Sign"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Greater than or equals",
        "description": "Outputs 1 when the sum of the white input is greater or equal than the sum of the non-white input",
        "type": 39,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Less than or equals",
        "description": "Outputs 1 when the sum of the white input is less or equal than the sum of the non-white input",
        "type": 40,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Greater than",
        "description": "Outputs 1 when the sum of the white input is greater than the sum of the non-white input",
        "type": 41,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Less than",
        "description": "Outputs 1 when the sum of the white input is less than the sum of the non-white input",
        "type": 42,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Equals",
        "description": "Outputs 1 when all inputs are equal",
        "type": 43,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Does not equal",
        "description": "Outputs 1 when inputs are not equal",
        "type": 44,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "X{Y}",
        "description": "Outputs 1 when any of the black inputs is equal any of the white inputs",
        "type": 45,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number", "logic"]],
        "inputPinDescriptions": ["Inputs to compare"],
        "outputPinDescriptions": ["Comparison"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Seated",
        "description": "Becomes active and outputs the value of input seats occupied",
        "type": 46,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["seat"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Seat to read from"],
        "outputPinDescriptions": ["Seated"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "A/D",
        "description": "Outputs the A/D value, range: -1 to 1\nMultiple driverseat inputs: average of A/D output of inputs,\nExcellent for teamwork!",
        "type": 47,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["seat", "orient"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Seat/Orient to read from"],
        "outputPinDescriptions": ["A/D"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "W/S",
        "description": "Outputs the W/S value, range: -1 to 1\nMultiple driverseat inputs: average of W/S output of inputs,\nExcellent for teamwork!",
        "type": 48,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["seat", "orient"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Seat/Orient to read from"],
        "outputPinDescriptions": ["W/S"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Counter",
        "description": "This block is used as a counting device. First input counts up; second input counts count down.\nThe output is a number; use with Number Blocks and Math Blocks. Positive and Negative range.\nPress E to reset counter to zero.\nCompatible with color weighted digits for inputs (i.e. 2 red inputs will count up/down by 10)",
        "type": 49,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number", "logic"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Control"],
        "outputPinDescriptions": ["Value stored"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Memory Panel",
        "description": "Saves a number value at a memory address. Use a number input for the value and a switch/button/logic to save that value. Use a second, white painted number input to specify the memory address.",
        "type": 50,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Control and value input"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Smart Timer",
        "description": "Number inputs:\nWhite: define how long to delay the signal\nOther: input number value, will output after the set delay\n\nLogic inputs:\nWhite = clear timer queue\nBlack = pause timer queue\nOther = input value of 1",
        "type": 51,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Control and value input"],
        "outputPinDescriptions": ["Output"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Tick Button",
        "description": "This button is very precise! When pushed, will send a signal that is 1 tick in length. This button can also have a number input to set the tick length for longer and more specific effect times.",
        "type": 52,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number", "logic"]],
        "outputPinTypes": [["logic"]],
        "inputPinDescriptions": ["Set tick length/activate button"],
        "outputPinDescriptions": ["Pulse"],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Wireless Router (send)",
        "description": "This wireless device can transmit data accross long distances!\n\nPaint color defines channel\nWhite number for frequency\n\nCaution: wireless devices on the same channel and frequency will interfere with each other.",
        "type": 53,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": [],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [],
        "inputPinDescriptions": ["Set frequency/value"],
        "outputPinDescriptions": [],
        "requiredMods": ["The Modpack"]
    },
    {
        "name": "Wireless Router (receive)",
        "description": "This wireless device can transmit data accross long distances!\n\nPaint color defines channel\nWhite number for frequency\n\nCaution: wireless devices on the same channel and frequency will interfere with each other.",
        "type": 54,
        "category": "Math",
        "inputPinNames": ["Input"],
        "outputPinNames": ["Output"],
        "inputPinTypes": [["number"]],
        "outputPinTypes": [["number"]],
        "inputPinDescriptions": ["Set frequency/value"],
        "outputPinDescriptions": ["Value received"],
        "requiredMods": ["The Modpack"]
    }
]