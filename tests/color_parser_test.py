
import sys
import os
import unittest
current = os.path.dirname(os.path.realpath(__file__))
parent = os.path.dirname(current)
sys.path.append(parent)
if True:
    from util.color_parser import parse


class TestColorParsing(unittest.TestCase):
    def test_hexcodes(self):
        self.assertEqual(parse("#FFFFFF"), "FFFFFF")
        self.assertEqual(parse("#000000"), "000000")
        self.assertEqual(parse("#FF0000"), "FF0000")
        self.assertEqual(parse("#00FF00"), "00FF00")
        self.assertEqual(parse("#0000FF"), "0000FF")
        self.assertEqual(parse("#FFFF00"), "FFFF00")
        self.assertEqual(parse("#00FFFF"), "00FFFF")
        self.assertEqual(parse("#FF00FF"), "FF00FF")
        self.assertEqual(parse("#FFA500"), "FFA500")
        self.assertEqual(parse("#888888"), "888888")
        self.assertEqual(parse("#EEEEEE"), "EEEEEE")
        self.assertEqual(parse("#222222"), "222222")
        self.assertEqual(parse("#EE7BF0"), "EE7BF0")

    def test_rgb(self):
        self.assertEqual(parse((255, 255, 255)), "FFFFFF")
        self.assertEqual(parse((0, 0, 0)), "000000")
        self.assertEqual(parse((255, 0, 0)), "FF0000")
        self.assertEqual(parse((0, 255, 0)), "00FF00")
        self.assertEqual(parse((0, 0, 255)), "0000FF")
        self.assertEqual(parse((255, 255, 0)), "FFFF00")
        self.assertEqual(parse((0, 255, 255)), "00FFFF")
        self.assertEqual(parse((255, 0, 255)), "FF00FF")
        self.assertEqual(parse((255, 165, 0)), "FFA500")
        self.assertEqual(parse((136, 136, 136)), "888888")
        self.assertEqual(parse((238, 235, 239)), "EEEBEF")
        self.assertEqual(parse((34, 34, 34)), "222222")
        self.assertEqual(parse((238, 123, 240)), "EE7BF0")

    def test_named(self):
        self.assertEqual(parse("gray"), "7F7F7F")
        self.assertEqual(parse("light gray"), "EEEEEE")
        self.assertEqual(parse("pale gray"), "EEEEEE")
        self.assertEqual(parse("normal gray"), "7F7F7F")
        self.assertEqual(parse("mid gray"), "7F7F7F")
        self.assertEqual(parse("dim gray"), "4A4A4A")
        self.assertEqual(parse("dark gray"), "222222")
        self.assertEqual(parse("gray 1"), "EEEEEE")
        self.assertEqual(parse("gray 2"), "7F7F7F")
        self.assertEqual(parse("gray 3"), "4A4A4A")
        self.assertEqual(parse("gray 4"), "222222")
        self.assertEqual(parse("grey"), "7F7F7F")
        self.assertEqual(parse("light grey"), "EEEEEE")
        self.assertEqual(parse("pale grey"), "EEEEEE")
        self.assertEqual(parse("normal grey"), "7F7F7F")
        self.assertEqual(parse("mid grey"), "7F7F7F")
        self.assertEqual(parse("dim grey"), "4A4A4A")
        self.assertEqual(parse("dark grey"), "222222")
        self.assertEqual(parse("grey 1"), "EEEEEE")
        self.assertEqual(parse("grey 2"), "7F7F7F")
        self.assertEqual(parse("grey 3"), "4A4A4A")
        self.assertEqual(parse("grey 4"), "222222")
        self.assertEqual(parse("yellow"), "E2DB13")
        self.assertEqual(parse("light yellow"), "F5F071")
        self.assertEqual(parse("pale yellow"), "F5F071")
        self.assertEqual(parse("normal yellow"), "E2DB13")
        self.assertEqual(parse("mid yellow"), "E2DB13")
        self.assertEqual(parse("dim yellow"), "817C00")
        self.assertEqual(parse("dark yellow"), "323000")
        self.assertEqual(parse("yellow 1"), "F5F071")
        self.assertEqual(parse("yellow 2"), "E2DB13")
        self.assertEqual(parse("yellow 3"), "817C00")
        self.assertEqual(parse("yellow 4"), "323000")
        self.assertEqual(parse("lime green"), "A0EA00")
        self.assertEqual(parse("light lime green"), "CBF66F")
        self.assertEqual(parse("pale lime green"), "CBF66F")
        self.assertEqual(parse("normal lime green"), "A0EA00")
        self.assertEqual(parse("mid lime green"), "A0EA00")
        self.assertEqual(parse("dim lime green"), "577D0")
        self.assertEqual(parse("dark lime green"), "375000")
        self.assertEqual(parse("lime green 1"), "CBF66F")
        self.assertEqual(parse("lime green 2"), "A0EA00")
        self.assertEqual(parse("lime green 3"), "577D0")
        self.assertEqual(parse("lime green 4"), "375000")
        self.assertEqual(parse("limegreen"), "A0EA00")
        self.assertEqual(parse("light limegreen"), "CBF66F")
        self.assertEqual(parse("pale limegreen"), "CBF66F")
        self.assertEqual(parse("normal limegreen"), "A0EA00")
        self.assertEqual(parse("mid limegreen"), "A0EA00")
        self.assertEqual(parse("dim limegreen"), "577D0")
        self.assertEqual(parse("dark limegreen"), "375000")
        self.assertEqual(parse("limegreen 1"), "CBF66F")
        self.assertEqual(parse("limegreen 2"), "A0EA00")
        self.assertEqual(parse("limegreen 3"), "577D0")
        self.assertEqual(parse("limegreen 4"), "375000")
        self.assertEqual(parse("lime"), "A0EA00")
        self.assertEqual(parse("light lime"), "CBF66F")
        self.assertEqual(parse("pale lime"), "CBF66F")
        self.assertEqual(parse("normal lime"), "A0EA00")
        self.assertEqual(parse("mid lime"), "A0EA00")
        self.assertEqual(parse("dim lime"), "577D0")
        self.assertEqual(parse("dark lime"), "375000")
        self.assertEqual(parse("lime 1"), "CBF66F")
        self.assertEqual(parse("lime 2"), "A0EA00")
        self.assertEqual(parse("lime 3"), "577D0")
        self.assertEqual(parse("lime 4"), "375000")
        self.assertEqual(parse("yellowgreen"), "A0EA00")
        self.assertEqual(parse("light yellowgreen"), "CBF66F")
        self.assertEqual(parse("pale yellowgreen"), "CBF66F")
        self.assertEqual(parse("normal yellowgreen"), "A0EA00")
        self.assertEqual(parse("mid yellowgreen"), "A0EA00")
        self.assertEqual(parse("dim yellowgreen"), "577D0")
        self.assertEqual(parse("dark yellowgreen"), "375000")
        self.assertEqual(parse("yellowgreen 1"), "CBF66F")
        self.assertEqual(parse("yellowgreen 2"), "A0EA00")
        self.assertEqual(parse("yellowgreen 3"), "577D0")
        self.assertEqual(parse("yellowgreen 4"), "375000")
        self.assertEqual(parse("yellow-green"), "A0EA00")
        self.assertEqual(parse("light yellow-green"), "CBF66F")
        self.assertEqual(parse("pale yellow-green"), "CBF66F")
        self.assertEqual(parse("normal yellow-green"), "A0EA00")
        self.assertEqual(parse("mid yellow-green"), "A0EA00")
        self.assertEqual(parse("dim yellow-green"), "577D0")
        self.assertEqual(parse("dark yellow-green"), "375000")
        self.assertEqual(parse("yellow-green 1"), "CBF66F")
        self.assertEqual(parse("yellow-green 2"), "A0EA00")
        self.assertEqual(parse("yellow-green 3"), "577D0")
        self.assertEqual(parse("yellow-green 4"), "375000")
        self.assertEqual(parse("yellow green"), "A0EA00")
        self.assertEqual(parse("light yellow green"), "CBF66F")
        self.assertEqual(parse("pale yellow green"), "CBF66F")
        self.assertEqual(parse("normal yellow green"), "A0EA00")
        self.assertEqual(parse("mid yellow green"), "A0EA00")
        self.assertEqual(parse("dim yellow green"), "577D0")
        self.assertEqual(parse("dark yellow green"), "375000")
        self.assertEqual(parse("yellow green 1"), "CBF66F")
        self.assertEqual(parse("yellow green 2"), "A0EA00")
        self.assertEqual(parse("yellow green 3"), "577D0")
        self.assertEqual(parse("yellow green 4"), "375000")
        self.assertEqual(parse("greenyellow"), "A0EA00")
        self.assertEqual(parse("light greenyellow"), "CBF66F")
        self.assertEqual(parse("pale greenyellow"), "CBF66F")
        self.assertEqual(parse("normal greenyellow"), "A0EA00")
        self.assertEqual(parse("mid greenyellow"), "A0EA00")
        self.assertEqual(parse("dim greenyellow"), "577D0")
        self.assertEqual(parse("dark greenyellow"), "375000")
        self.assertEqual(parse("greenyellow 1"), "CBF66F")
        self.assertEqual(parse("greenyellow 2"), "A0EA00")
        self.assertEqual(parse("greenyellow 3"), "577D0")
        self.assertEqual(parse("greenyellow 4"), "375000")
        self.assertEqual(parse("green-yellow"), "A0EA00")
        self.assertEqual(parse("light green-yellow"), "CBF66F")
        self.assertEqual(parse("pale green-yellow"), "CBF66F")
        self.assertEqual(parse("normal green-yellow"), "A0EA00")
        self.assertEqual(parse("mid green-yellow"), "A0EA00")
        self.assertEqual(parse("dim green-yellow"), "577D0")
        self.assertEqual(parse("dark green-yellow"), "375000")
        self.assertEqual(parse("green-yellow 1"), "CBF66F")
        self.assertEqual(parse("green-yellow 2"), "A0EA00")
        self.assertEqual(parse("green-yellow 3"), "577D0")
        self.assertEqual(parse("green-yellow 4"), "375000")
        self.assertEqual(parse("green yellow"), "A0EA00")
        self.assertEqual(parse("light green yellow"), "CBF66F")
        self.assertEqual(parse("pale green yellow"), "CBF66F")
        self.assertEqual(parse("normal green yellow"), "A0EA00")
        self.assertEqual(parse("mid green yellow"), "A0EA00")
        self.assertEqual(parse("dim green yellow"), "577D0")
        self.assertEqual(parse("dark green yellow"), "375000")
        self.assertEqual(parse("green yellow 1"), "CBF66F")
        self.assertEqual(parse("green yellow 2"), "A0EA00")
        self.assertEqual(parse("green yellow 3"), "577D0")
        self.assertEqual(parse("green yellow 4"), "375000")
        self.assertEqual(parse("green"), "19E753")
        self.assertEqual(parse("light green"), "68FF88")
        self.assertEqual(parse("pale green"), "68FF88")
        self.assertEqual(parse("normal green"), "19E753")
        self.assertEqual(parse("mid green"), "19E753")
        self.assertEqual(parse("dim green"), "0E8031")
        self.assertEqual(parse("dark green"), "064023")
        self.assertEqual(parse("green 1"), "68FF88")
        self.assertEqual(parse("green 2"), "19E753")
        self.assertEqual(parse("green 3"), "0E8031")
        self.assertEqual(parse("green 4"), "064023")
        self.assertEqual(parse("cyan"), "2CE6E6")
        self.assertEqual(parse("light cyan"), "7EEDED")
        self.assertEqual(parse("pale cyan"), "7EEDED")
        self.assertEqual(parse("normal cyan"), "2CE6E6")
        self.assertEqual(parse("mid cyan"), "2CE6E6")
        self.assertEqual(parse("dim cyan"), "118787")
        self.assertEqual(parse("dark cyan"), "0A4444")
        self.assertEqual(parse("cyan 1"), "7EEDED")
        self.assertEqual(parse("cyan 2"), "2CE6E6")
        self.assertEqual(parse("cyan 3"), "118787")
        self.assertEqual(parse("cyan 4"), "0A4444")
        self.assertEqual(parse("aqua"), "2CE6E6")
        self.assertEqual(parse("light aqua"), "7EEDED")
        self.assertEqual(parse("pale aqua"), "7EEDED")
        self.assertEqual(parse("normal aqua"), "2CE6E6")
        self.assertEqual(parse("mid aqua"), "2CE6E6")
        self.assertEqual(parse("dim aqua"), "118787")
        self.assertEqual(parse("dark aqua"), "0A4444")
        self.assertEqual(parse("aqua 1"), "7EEDED")
        self.assertEqual(parse("aqua 2"), "2CE6E6")
        self.assertEqual(parse("aqua 3"), "118787")
        self.assertEqual(parse("aqua 4"), "0A4444")
        self.assertEqual(parse("blue"), "0A3EE2")
        self.assertEqual(parse("light blue"), "4C6FE3")
        self.assertEqual(parse("pale blue"), "4C6FE3")
        self.assertEqual(parse("normal blue"), "0A3EE2")
        self.assertEqual(parse("mid blue"), "0A3EE2")
        self.assertEqual(parse("dim blue"), "0F2E91")
        self.assertEqual(parse("dark blue"), "0A1D5A")
        self.assertEqual(parse("blue 1"), "4C6FE3")
        self.assertEqual(parse("blue 2"), "0A3EE2")
        self.assertEqual(parse("blue 3"), "0F2E91")
        self.assertEqual(parse("blue 4"), "0A1D5A")
        self.assertEqual(parse("violet"), "7514ED")
        self.assertEqual(parse("light violet"), "AE79F0")
        self.assertEqual(parse("pale violet"), "AE79F0")
        self.assertEqual(parse("normal violet"), "7514ED")
        self.assertEqual(parse("mid violet"), "7514ED")
        self.assertEqual(parse("dim violet"), "500AA6")
        self.assertEqual(parse("dark violet"), "35086C")
        self.assertEqual(parse("violet 1"), "AE79F0")
        self.assertEqual(parse("violet 2"), "7514ED")
        self.assertEqual(parse("violet 3"), "500AA6")
        self.assertEqual(parse("violet 4"), "35086C")
        self.assertEqual(parse("purple"), "7514ED")
        self.assertEqual(parse("light purple"), "AE79F0")
        self.assertEqual(parse("pale purple"), "AE79F0")
        self.assertEqual(parse("normal purple"), "7514ED")
        self.assertEqual(parse("mid purple"), "7514ED")
        self.assertEqual(parse("dim purple"), "500AA6")
        self.assertEqual(parse("dark purple"), "35086C")
        self.assertEqual(parse("purple 1"), "AE79F0")
        self.assertEqual(parse("purple 2"), "7514ED")
        self.assertEqual(parse("purple 3"), "500AA6")
        self.assertEqual(parse("purple 4"), "35086C")
        self.assertEqual(parse("magenta"), "CF11D2")
        self.assertEqual(parse("light magenta"), "EE7BF0")
        self.assertEqual(parse("pale magenta"), "EE7BF0")
        self.assertEqual(parse("normal magenta"), "CF11D2")
        self.assertEqual(parse("mid magenta"), "CF11D2")
        self.assertEqual(parse("dim magenta"), "720A74")
        self.assertEqual(parse("dark magenta"), "520653")
        self.assertEqual(parse("magenta 1"), "EE7BF0")
        self.assertEqual(parse("magenta 2"), "CF11D2")
        self.assertEqual(parse("magenta 3"), "720A74")
        self.assertEqual(parse("magenta 4"), "520653")
        self.assertEqual(parse("red"), "D02525")
        self.assertEqual(parse("light red"), "F06767")
        self.assertEqual(parse("pale red"), "F06767")
        self.assertEqual(parse("normal red"), "D02525")
        self.assertEqual(parse("mid red"), "D02525")
        self.assertEqual(parse("dim red"), "7C0000")
        self.assertEqual(parse("dark red"), "560202")
        self.assertEqual(parse("red 1"), "F06767")
        self.assertEqual(parse("red 2"), "D02525")
        self.assertEqual(parse("red 3"), "7C0000")
        self.assertEqual(parse("red 4"), "560202")
        self.assertEqual(parse("orange"), "DF7F00")
        self.assertEqual(parse("light orange"), "EEAF5C")
        self.assertEqual(parse("pale orange"), "EEAF5C")
        self.assertEqual(parse("normal orange"), "DF7F00")
        self.assertEqual(parse("mid orange"), "DF7F00")
        self.assertEqual(parse("dim orange"), "673B00")
        self.assertEqual(parse("dark orange"), "472800")
        self.assertEqual(parse("orange 1"), "EEAF5C")
        self.assertEqual(parse("orange 2"), "DF7F00")
        self.assertEqual(parse("orange 3"), "673B00")
        self.assertEqual(parse("orange 4"), "472800")
        self.assertEqual(parse("white"), "EEEEEE")
        self.assertEqual(parse("black"), "222222")
        self.assertEqual(parse("pink"), "EE7BF0")
        self.assertEqual(parse("pureblack"), "000000")
        self.assertEqual(parse("pure black"), "000000")
        self.assertEqual(parse("purewhite"), "FFFFFF")
        self.assertEqual(parse("pure white"), "FFFFFF")
        self.assertEqual(parse("puregray"), "888888")
        self.assertEqual(parse("pure gray"), "888888")
        self.assertEqual(parse("puregrey"), "888888")
        self.assertEqual(parse("pure grey"), "888888")
        self.assertEqual(parse("purered"), "FF0000")
        self.assertEqual(parse("pure red"), "FF0000")
        self.assertEqual(parse("puregreen"), "00FF00")
        self.assertEqual(parse("pure green"), "00FF00")
        self.assertEqual(parse("pureblue"), "0000FF")
        self.assertEqual(parse("pure blue"), "0000FF")
        self.assertEqual(parse("pureyellow"), "FFFF00")
        self.assertEqual(parse("pure yellow"), "FFFF00")
        self.assertEqual(parse("purecyan"), "00FFFF")
        self.assertEqual(parse("pure cyan"), "00FFFF")
        self.assertEqual(parse("puremagenta"), "FF00FF")
        self.assertEqual(parse("pure magenta"), "FF00FF")
        self.assertEqual(parse("pureorange"), "FFA500")
        self.assertEqual(parse("pure orange"), "FFA500")


if __name__ == '__main__':
    unittest.main()
